worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
	worker_connections 1024;
}

http {
	resolver ${{RESOLVER}};
	lua_ssl_trusted_certificate '${{CA_CERTS}}';

	include mime.types;
	lua_shared_dict tpt_scripts_locks 100k;
	lua_shared_dict tpt_scripts_rate_limit 100k;
	lua_shared_dict tpt_scripts_auth 100k;

	client_body_temp_path temp/client_body;
	uwsgi_temp_path temp/uwsgi;
	proxy_temp_path temp/proxy;
	fastcgi_temp_path temp/fastcgi;
	scgi_temp_path temp/scgi;

	init_worker_by_lua_block {
		require("environment")
		if ngx.worker.id() == 0 then
			require("util").init_manifest()
		end
	}

	server {
		listen ${{PORT}};
		lua_code_cache ${{CODE_CACHE}};

		location / {
			# https://leafo.net/lapis/reference/utilities.html#making-http-requests
			set $_url "";
			default_type text/html;

			location /scripts {
				client_max_body_size ${{SCRIPTS_MAX_BODY_SIZE}};
				content_by_lua_block {
					require("environment")
					require("lapis").serve("app")
				}
			}

			location /staff {
				content_by_lua_block {
					require("environment")
					require("lapis").serve("app")
				}
			}

			content_by_lua_block {
				require("environment")
				require("lapis").serve("app")
			}
		}

		location /static/ {
			alias static/;
		}

		location /data/ {
			types {
				"application/json" json;
			} default_type "application/x-gtar";
			alias data/;
		}

		# https://leafo.net/lapis/reference/utilities.html#making-http-requests
		location /proxy {
			internal;
			rewrite_by_lua_block {
				local req = ngx.req

				for k,v in pairs(req.get_headers()) do
					if k ~= 'content-length' then
						req.clear_header(k)
					end
				end

				if ngx.ctx.headers then
					for k,v in pairs(ngx.ctx.headers) do
						req.set_header(k, v)
					end
				end
			}

			proxy_http_version 1.1;
			proxy_pass $_url;
		}
	}
}
